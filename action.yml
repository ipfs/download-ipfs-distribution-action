name: 'Download IPFS Distribution'
description: 'Download executable from dist.ipfs.tech'
inputs:
  name:
    description: 'Name of the distribution to download'
    required: true
    default: 'kubo'
  version:
    description: 'Version of the distribution to download(defaults to latest stable version)'
    required: false
  working-directory:
    description: "Directory where the action is going to be performed(defaults to temp directory)"
    required: false
  install-directory:
    description: "Directory where the executable is going to be copied(defaults to /usr/local/bin or /usr/bin on windows)"
    required: false
  cache:
    description: "A boolean value to indicate the fallback cache should be used"
    required: false
    default: 'true'
  prefix:
    description: "Prefix to be used for the GitHub Actions artifact upload (defaults to download-ipfs-distribution-action)"
    required: false
    default: 'download-ipfs-distribution-action'
outputs:
  executable:
    description: "The name of the executable"
    value: ${{ steps.copy.outputs.executable }}
  executables:
    description: "The names of all the executables"
    value: ${{ steps.copy.outputs.executables }}
  cache-hit:
    description: "A boolean value to indicate the fallback cache was used"
    value: ${{ (steps.versions-download.outcome == 'failure' && steps.versions-cache.outcome == 'success') || (steps.dist-download.outcome == 'failure' && steps.dist-cache.outcome == 'success') || (steps.archive-download.outcome == 'failure' && steps.archive-cache.outcome == 'success') }}
runs:
  using: "composite"
  steps:
    - id: system
      run: |
        WORKING_DIRECTORY="${{ inputs.working-directory }}"
        OS="$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')"
        ARCH="$(echo ${{ runner.arch }} | tr '[:upper:]' '[:lower:]')"
        if [ -z "$WORKING_DIRECTORY" ]; then
          WORKING_DIRECTORY="${{ runner.temp }}"
        fi
        case "$OS" in
          macos) OS="darwin" ;;
        esac
        case "$ARCH" in
          x86) ARCH="386" ;;
          x64) ARCH="amd64" ;;
        esac
        echo "working-directory=$WORKING_DIRECTORY"
        echo "os=$OS"
        echo "arch=$ARCH"
        echo "working-directory=$WORKING_DIRECTORY" >> $GITHUB_OUTPUT
        echo "os=$OS" >> $GITHUB_OUTPUT
        echo "arch=$ARCH" >> $GITHUB_OUTPUT
      shell: bash
    - run: mkdir "${{ inputs.name }}"
      shell: bash
      working-directory: ${{ steps.system.outputs.working-directory }}
    - id: versions-download
      if: inputs.version == ''
      run: curl --retry 5 --no-progress-meter --output "${{ inputs.name }}/versions" "https://dist.ipfs.tech/${{ inputs.name }}/versions"
      continue-on-error: ${{ inputs.cache == 'true' }}
      shell: bash
      working-directory: ${{ steps.system.outputs.working-directory }}
    - id: versions-cache
      if: inputs.version == '' && inputs.cache == 'true'
      uses: actions/cache/restore@v4
      with:
        path: ${{ steps.system.outputs.working-directory }}/${{ inputs.name }}/versions
        key: ${{ inputs.prefix }}_${{ inputs.name }}_versions
        lookup-only: ${{ steps.versions-download.outcome == 'success' }}
        fail-on-cache-miss: ${{ steps.versions-download.outcome == 'failure' }}
      continue-on-error: ${{ steps.versions-download.outcome == 'success' }}
    - if: inputs.version == '' && inputs.cache == 'true' && steps.versions-cache.outputs.cache-hit == ''
      uses: actions/cache/save@v4
      with:
        path: ${{ steps.system.outputs.working-directory }}/${{ inputs.name }}/versions
        key: ${{ inputs.prefix }}_${{ inputs.name }}_versions
      continue-on-error: true
    - id: inputs
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        VERSION="${{ inputs.version }}"
        INSTALL_DIRECTORY="${{ inputs.install-directory }}"
        if [ -z "$VERSION" ]; then
          VERSION="$(grep -v rc "${{ inputs.name }}/versions" | tail -n 1)"
        fi
        if [ -z "$INSTALL_DIRECTORY" ]; then
          if [ "${{ steps.system.outputs.os }}" == "windows" ]; then
            INSTALL_DIRECTORY="/usr/bin"
          else
            INSTALL_DIRECTORY="/usr/local/bin"
          fi
        fi
        echo "version=$VERSION"
        echo "install-directory=$INSTALL_DIRECTORY"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "install-directory=$INSTALL_DIRECTORY" >> $GITHUB_OUTPUT
      shell: bash
      working-directory: ${{ steps.system.outputs.working-directory }}
    - id: dist-download
      run: curl --retry 5 --no-progress-meter --output "${{ inputs.name }}/dist.json" "https://dist.ipfs.tech/${{ inputs.name }}/${{ steps.inputs.outputs.version }}/dist.json"
      continue-on-error: ${{ inputs.cache == 'true' }}
      shell: bash
      working-directory: ${{ steps.system.outputs.working-directory }}
    - id: dist-cache
      if: inputs.cache == 'true'
      uses: actions/cache/restore@v4
      with:
        path: ${{ steps.system.outputs.working-directory }}/${{ inputs.name }}/dist.json
        key: ${{ inputs.prefix }}_${{ inputs.name }}_${{ steps.inputs.outputs.version }}_dist.json
        lookup-only: ${{ steps.dist-download.outcome == 'success' }}
        fail-on-cache-miss: ${{ steps.dist-download.outcome == 'failure' }}
      continue-on-error: ${{ steps.dist-download.outcome == 'success' }}
    - if: inputs.version == '' && inputs.cache == 'true' && steps.dist-cache.outputs.cache-hit == ''
      uses: actions/cache/save@v4
      with:
        path: ${{ steps.system.outputs.working-directory }}/${{ inputs.name }}/dist.json
        key: ${{ inputs.prefix }}_${{ inputs.name }}_${{ steps.inputs.outputs.version }}_dist.json
      continue-on-error: true
    - id: dist
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        LINK="$(jq -r '.platforms.${{ steps.system.outputs.os }}.archs.${{ steps.system.outputs.arch }}.link | values' "${{ inputs.name }}/dist.json")"
        ARCHIVE="$(basename "$LINK")"
        SHA512="$(jq -r '.platforms.${{ steps.system.outputs.os }}.archs.${{ steps.system.outputs.arch }}.sha512 | values' "${{ inputs.name }}/dist.json")"
        echo "link=$LINK"
        echo "archive=$ARCHIVE"
        echo "sha512=$SHA512"
        echo "link=$LINK" >> $GITHUB_OUTPUT
        echo "_link=${LINK//\//_}" >> $GITHUB_OUTPUT
        echo "archive=$ARCHIVE" >> $GITHUB_OUTPUT
        echo "sha512=$SHA512" >> $GITHUB_OUTPUT
        if [[ "$LINK" == '' ]]; then
          echo "::error::Could not find download link for '${{ inputs.name }}@${{ steps.inputs.outputs.version }}' (${{ steps.system.outputs.os }} ${{ steps.system.outputs.arch }}) on dist.ipfs.tech"
          exit 1
        fi
      shell: bash
      working-directory: ${{ steps.system.outputs.working-directory }}
    - id: archive-download
      run: curl --retry 5 --no-progress-meter --output "${{ steps.dist.outputs.archive }}" "https://dist.ipfs.tech/${{ inputs.name }}/${{ steps.inputs.outputs.version }}${{ steps.dist.outputs.link }}"
      continue-on-error: ${{ inputs.cache == 'true' }}
      shell: bash
      working-directory: ${{ steps.system.outputs.working-directory }}
    - id: archive-cache
      if: inputs.cache == 'true'
      uses: actions/cache/restore@v4
      with:
        path: ${{ steps.system.outputs.working-directory }}/${{ steps.dist.outputs.archive }}
        key: ${{ inputs.prefix }}_${{ inputs.name }}_${{ steps.inputs.outputs.version }}${{ steps.dist.outputs._link }}
        lookup-only: ${{ steps.archive-download.outcome == 'success' }}
        fail-on-cache-miss: ${{ steps.archive-download.outcome == 'failure' }}
      continue-on-error: ${{ steps.archive-download.outcome == 'success' }}
    - if: inputs.version == '' && inputs.cache == 'true' && steps.archive-cache.outputs.cache-hit == ''
      uses: actions/cache/save@v4
      with:
        path: ${{ steps.system.outputs.working-directory }}/${{ steps.dist.outputs.archive }}
        key: ${{ inputs.prefix }}_${{ inputs.name }}_${{ steps.inputs.outputs.version }}${{ steps.dist.outputs._link }}
      continue-on-error: true
    - if: steps.dist.outputs.sha512 != ''
      run: |
        CMD="sha512sum"
        if [ "${{ runner.os }}" == "macOS" ]; then
          CMD="shasum --algorithm 512"
        fi
        echo "${{ steps.dist.outputs.sha512 }}  ${{ steps.dist.outputs.archive }}" | $CMD --check
      shell: bash
      working-directory: ${{ steps.system.outputs.working-directory }}
    - run: |
        case "${{ steps.dist.outputs.archive }}" in
          *.tar.gz) tar -zxf "${{ steps.dist.outputs.archive }}" ;;
          *.zip) 7z e "${{ steps.dist.outputs.archive }}" -o${{ inputs.name }} ;;
        esac
      shell: bash
      working-directory: ${{ steps.system.outputs.working-directory }}
    - id: copy
      env:
        NAME: ${{ inputs.name }}
        INSTALL_DIRECTORY: ${{ steps.inputs.outputs.install-directory }}
      run: |
        EXECUTABLES=()
        for executable in $(find $NAME -type f -perm -111 ! -name "*.sh"); do
          if [ -w "$INSTALL_DIRECTORY" ]; then
            cp "$executable" "$INSTALL_DIRECTORY/$EXECUTABLE"
          elif [ -x "$(command -v sudo)" ]; then
            sudo cp "$executable" "$INSTALL_DIRECTORY/$EXECUTABLE"
          else
            echo "Unable to install $EXECUTABLE to $INSTALL_DIRECTORY"
            exit 1
          fi
          EXECUTABLES+=("$(basename $executable)")
        done
        EXECUTABLE="${EXECUTABLES[0]}"
        EXECUTABLES="$(jq -nc '$ARGS.positional' --args ${EXECUTABLES[@]})"
        echo "executable=$EXECUTABLE"
        echo "executables=$EXECUTABLES"
        echo "executable=$EXECUTABLE" >> $GITHUB_OUTPUT
        echo "executables=$EXECUTABLES" >> $GITHUB_OUTPUT
      shell: bash
      working-directory: ${{ steps.system.outputs.working-directory }}
    - if: always()
      run: |
        rm -r "${{ inputs.name }}"
        rm "${{ steps.dist.outputs.archive }}"
      shell: bash
      working-directory: ${{ steps.system.outputs.working-directory }}
